NodeJs session1
Official packages for all the major platforms are available at https://nodejs.org/en/download/
https://nodejs.dev/learn/introduction-to-nodejs
==>Node.js is an open-source and cross-platform JavaScript runtime environment. It is a popular tool for almost any kind of project!

Node.js runs the V8 JavaScript engine, the core of Google Chrome, outside of the browser. This allows Node.js to be very performant.

A Node.js app is run in a single process, without creating a new thread for every request. Node.js provides a set of asynchronous I/O primitives in its standard library that prevent JavaScript code from blocking and generally, libraries in Node.js are written using non-blocking paradigms, making blocking behavior the exception rather than the norm.

When Node.js performs an I/O operation, like reading from the network, accessing a database or the filesystem, instead of blocking the thread and wasting CPU cycles waiting, Node.js will resume the operations when the response comes back.

This allows Node.js to handle thousands of concurrent connections with a single server without introducing the burden of managing thread concurrency, which could be a significant source of bugs.

Node.js has a unique advantage because millions of frontend developers that write JavaScript for the browser are now able to write the server-side code in addition to the client-side code without the need to learn a completely different language.

In Node.js the new ECMAScript standards can be used without problems, as you don't have to wait for all your users to update their browsers - you are in charge of deciding which ECMAScript version to use by changing the Node.js version, and you can also enable specific experimental features by running Node.js with flags.

A Vast Number of Libraries
npm with its simple structure helped the ecosystem of Node.js proliferate, and now the npm registry hosts over 1,000,000 open source packages you can freely use.

JavaScript is an interpreted language, not a compiled language so NodeJs is interpreted
------------------------------------------------------------------------------------------
==>Differences between Node.js and the Browser
Both the browser and Node.js use JavaScript as their programming language.
-->From the perspective of a frontend developer who extensively uses JavaScript, Node.js apps bring with them a huge advantage: the comfort of programming everything - the frontend and the backend - in a single language.


HTML + JS  => DHTML
===================
Java Script -
       Object based

demo 1. create a simple text file welcome.js
console.log("some text  message")

Observation :once nodejs is installed we do not require browser to run the .js file.
The runtime evironment is offered by nodejs.

Test as: node welcome.js 
----------------------------------------
Js is object based language
built in object

Language Objects (available in Node JS and Client Browser)
==================
String
Math
Date
Boolean
Number
Array
Object

Browser Objects   (available Client Browser)
===================
window
document
history
TextField

custom Objects
================
  function
  object
  json

some window events:
==================
onload
open
setInterval
setTimeOut

setTimeOut,setInterval cannot be used in the nodejs because these are client side methods, runs in the client browser

Node JS   :    Serverside JS
===========
Node JS  => Java Script run time environment + built in JS libraries (modlues or packages)

Each js file is called as a module
refer to documentation for module help
https://nodejs.org/dist/latest-v14.x/docs/api/os.html

Node JS builtin libraries (packages or modules)
===============================================
global modules::No need to import , their functions can be called directly.

buffer     => global mdoule
timers     => global module
-------------------------------------
os         => get the info about os 
fs         => Reading and writing 
events     => to handle events
           EventEmitter
             on             => handle the events
             addListener    => handle the events
            emit           => firing the event
http       =>create a server
url        => handle query params 
process    =>To handle system processes

Node JS built in modules 
===========================
os,buffer,fs,timers,events,http,url,process,path

Demo : day1.zip
seq: welcome.js,osdemo.js,timerdemo.js,
welcome.js
console.log("Welcome To Node JS at Atos Syntel");
-------------------------------------------------------
osdemo.js
var os=require("os");  //import os package
console.log("Platform     :"+os.platform());
console.log("Host Name    :"+os.hostname());
console.log("Home Dir     :"+os.homedir());
console.log("Temp Dir     :"+os.tmpdir());
console.log("Total Memory :"+os.totalmem());
console.log("Free Memory  :"+os.freemem());
-------------------------------------------------------
timersdemo.js

 var interval=setInterval(welcome,1000);

 setTimeout(bye,10000);


function welcome(){
    console.log("Welcome To Timers Module at Atos Syntel");
}

function bye(){
    console.log("Good Bye Timers Module at Atos Syntel");
    clearInterval(interval);
}
-------------------------------------------------------
File operations

==>file reading
var fs=require("fs");

fs.readFile("osdemo1.js",function(error,data){

   if(error)
   return console.error(error);

    console.log("File Contents ");
    console.log(""+data);
});
console.log("File Reading Completed....");
----------------------------------------
==> File read sync
var fs=require("fs");

var data=fs.readFileSync("osdemo.js");

console.log(data);
console.log("To String ");
console.log(data.toString());
console.log("To JSON ");
console.log(data.toJSON());


console.log("File Reading Completed....");
-------------------------------------------------
===>File reading with events

var fs=require("fs");
var data="";

var rstream=fs.createReadStream("osdemo1.js");

rstream.on("data",function(buffer){
console.log("Data Event Occured");
data=buffer;
});

rstream.on("error",function(error){
    console.log("Error Event Occured");
    console.error(error);
});
    
rstream.on("end",function(error){
    console.log("File Reading Over");
    console.log(data.toString());

});
console.log("File Reading Completed....");
------------------------------------------------------
fswrite.js

var fs=require("fs");
fs.writeFileSync("test.txt","Hello World");
console.log("File Writing Completed....");
----------------------------------------------------
--fswrite_async.js
var fs=require("fs");
var buffer=new Buffer("Hello All,Hope You r enjoying the session");
fs.writeFile("test.txt",buffer,function(err){
    if(err)
    return console.log("erro in writing the contents....");
    console.log("Contents written in the file");
});
console.log("File Writing Completed....");
---------------------------------------------------
https://nodejs.org/api/events.html#events_class_eventemitter
==>The Node.js Event emitter
If you worked with JavaScript in the browser, you know how much of the interaction of the user is handled through events: mouse clicks, keyboard button presses, reacting to mouse movements, and so on.

On the backend side, Node.js offers us the option to build a similar system using the events module.

This module, in particular, offers the EventEmitter class, which we'll use to handle our events.

You initialize that using

const EventEmitter = require('events')
const eventEmitter = new EventEmitter()
This object exposes, among many others, the on and emit methods.

emit is used to trigger an event
on is used to add a callback function that's going to be executed when the event is triggered

For example, let's create a start event, and as a matter of providing a sample, we react to that by just logging to the console:

eventEmitter.on('start', () => {
  console.log('started')
})
When we run

eventEmitter.emit('start')  

the event handler function is triggered, and we get the console log.

You can pass arguments to the event handler by passing them as additional arguments to emit():

eventEmitter.on('start', number => {
  console.log(`started ${number}`)
})

eventEmitter.emit('start', 23)

Multiple arguments:

eventEmitter.on('start', (start, end) => {
  console.log(`started from ${start} to ${end}`)
})

eventEmitter.emit('start', 1, 100)
The EventEmitter object also exposes several other methods to interact with events, like

once(): add a one-time listener
removeListener() / off(): remove an event listener from an event
removeAllListeners(): remove all listeners for an event
You can read all their details on the events module page at https://nodejs.org/api/events.html
----------------------------------------------------------------
==> Httpmodule
1. Creating a basic server
var http=require("http");
//create server
var server=http.createServer(function(request,response){
    response.end("Hello All ,Welcome To Http Module at Atos Syntel  :"+request.method);
});

//start the server on port 1111
server.listen(1111,function(){
    console.log("Servver listening on port :1111");
})
------------------------------------------
2.passing parameters thrugh url

var http=require("http");
var url=require("url");

//create server
var server=http.createServer(function(request,response){

    var myURL=new url.URL("http://localhost:1111"+request.url);

    var id=myURL.searchParams.get("id");
    var name=myURL.searchParams.get("name");
    var salary=myURL.searchParams.get("salary");
     
    var data=id+"  "+name+"  "+salary;

    //response.end("Hello All ,Welcome To Http Module at Atos Syntel  :<br><br>"+myURL);
    response.end(""+data);    
});
//start the server on port 1111
server.listen(1111,function(){
    console.log("Servver listening on port :1111");
})

---------------------------------------------------
todo: the Javascript functions for Arrays,we will be using this in restful API development.
(push,pop,toString,forEach,map,filter)

-----------------------------------------------------